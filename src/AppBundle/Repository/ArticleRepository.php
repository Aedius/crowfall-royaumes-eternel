<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Category;
use AppBundle\Entity\User;
use AppBundle\Entity\Version;
use Doctrine\ORM\EntityRepository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{

    /**
     * @param Category $category
     * @param int $paginationSize
     * @param int $page
     * @return mixed
     */
    public function getByCategory(Category $category, $paginationSize, $page)
    {
        return $this->createQueryBuilder('art')
            ->andWhere('art.published = 1')
            ->andWhere('art.masterCategory = :cat')
            ->leftJoin('art.categoryList', 'cat')
            ->orWhere('cat = :cat')
            ->setParameter('cat', $category)
            ->orderBy('art.publishedAt', 'desc')
            ->setMaxResults($paginationSize)
            ->setFirstResult(($page - 1) * $paginationSize)
            ->getQuery()
            ->execute();
    }

    /**
     * @param Category $category
     * @return mixed
     */
    public function getCountByCategory(Category $category)
    {
        return $this->createQueryBuilder('art')
            ->select('COUNT(art)')
            ->andWhere('art.published = 1')
            ->andWhere('art.masterCategory = :cat')
            ->leftJoin('art.categoryList', 'cat')
            ->orWhere('cat = :cat')
            ->setParameter('cat', $category)
            ->orderBy('art.publishedAt', 'desc')
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @param Version $version
     * @param int $paginationSize
     * @param int $page
     * @return mixed
     */
    public function getByVersion(Version $version, $paginationSize, $page)
    {
        return $this->createQueryBuilder('art')
            ->andWhere('art.published = 1')
            ->andWhere('art.version = :version')
            ->setParameter('version', $version)
            ->orderBy('art.publishedAt', 'desc')
            ->setMaxResults($paginationSize)
            ->setFirstResult(($page - 1) * $paginationSize)
            ->getQuery()
            ->execute();
    }

    /**
     * @param Version $version
     * @return mixed
     */
    public function getCountByVersion(Version $version)
    {
        return $this->createQueryBuilder('art')
            ->select('COUNT(art)')
            ->andWhere('art.published = 1')
            ->andWhere('art.version = :version')
            ->setParameter('version', $version)
            ->orderBy('art.publishedAt', 'desc')
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @param User $user
     * @param int $paginationSize
     * @param int $page
     * @return mixed
     */
    public function getByAuthor(User $user, $paginationSize, $page)
    {
        return $this->createQueryBuilder('art')
            ->andWhere('art.published = 1')
            ->andWhere('art.author = :author')
            ->setParameter('author', $user)
            ->orderBy('art.publishedAt', 'desc')
            ->setMaxResults($paginationSize)
            ->setFirstResult(($page - 1) * $paginationSize)
            ->getQuery()
            ->execute();
    }

    /**
     * @param User $user
     * @return mixed
     */
    public function getCountByAuthor(User $user)
    {
        return $this->createQueryBuilder('art')
            ->select('COUNT(art)')
            ->andWhere('art.published = 1')
            ->andWhere('art.author = :author')
            ->setParameter('author', $user)
            ->orderBy('art.publishedAt', 'desc')
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @param int $paginationSize
     * @param int $page
     * @return mixed
     */
    public function getAll($paginationSize, $page)
    {
        return $this->createQueryBuilder('art')
            ->andWhere('art.published = 1')
            ->orderBy('art.publishedAt', 'desc')
            ->setMaxResults($paginationSize)
            ->setFirstResult(($page - 1) * $paginationSize)
            ->getQuery()
            ->execute();
    }

    /**
     * @return mixed
     */
    public function getAllCount()
    {
        return $this->createQueryBuilder('art')
            ->select('COUNT(art)')
            ->andWhere('art.published = 1')
            ->orderBy('art.publishedAt', 'desc')
            ->getQuery()
            ->getSingleScalarResult();
    }

}
